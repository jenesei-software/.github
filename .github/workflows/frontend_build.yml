name: Frontend Build

on:
  workflow_call:
    inputs:
      version_type:
        description: "major | minor | patch | none"
        required: false
        type: string
      package_manager:
        description: "npm | yarn | bun"
        required: false
        default: "npm"
        type: string
    secrets:
      ACCESS_GITHUB_TOKEN:
        required: true

jobs:
  checkout:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.get_branch.outputs.branch_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get branch name
        id: get_branch
        run: echo "branch_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

  setup:
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Setup Bun
        if: inputs.package_manager == 'bun'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

  git:
    needs: [checkout, setup]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean Git
        run: |
          git reset --hard || echo "No changes to reset"
          git clean -fd || echo "No files to clean"

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Configure .npmrc for GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.ACCESS_GITHUB_TOKEN }}" > ~/.npmrc
          echo "@jenesei-software:registry=https://npm.pkg.github.com/" >> ~/.npmrc
          if [ -f .npmrc ]; then cp .npmrc ~/.npmrc; fi

      - name: Fetch all tags
        run: git fetch --tags

  version:
    needs: git
    runs-on: ubuntu-latest
    outputs:
      full_version: ${{ steps.define.outputs.full_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Define version type and bump version
        id: define
        run: |
          echo "Version type input: ${{ inputs.version_type }}"

          if [[ -n "${{ inputs.version_type }}" ]]; then
            VERSION_TYPE="${{ inputs.version_type }}"
          else
            VERSION_TYPE="none"
          fi
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

          BRANCH_NAME="${{ github.ref_name }}"
          VERSION=""
          BUILD=""

          # Извлекаем базовую версию (без build и branch) из package.json, если она там уже в формате full_version
          PACKAGE_VERSION_RAW=$(node -p "require('./package.json').version")
          BASE_VERSION=$(echo "$PACKAGE_VERSION_RAW" | sed 's/-.*//')

          if [ "$VERSION_TYPE" != "none" ]; then
            IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

            if [ "$VERSION_TYPE" = "major" ]; then
              MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0
            elif [ "$VERSION_TYPE" = "minor" ]; then
              MINOR=$((MINOR + 1)); PATCH=0
            elif [ "$VERSION_TYPE" = "patch" ]; then
              PATCH=$((PATCH + 1))
            fi

            VERSION="${MAJOR}.${MINOR}.${PATCH}"
            BUILD=1
          else
            VERSION="$BASE_VERSION"

            # Если нет тегов — устанавливаем начальную версию
            if [ -z "$VERSION" ]; then
              VERSION="0.0.0"
            fi

            # Считаем номер билда для этой версии и ветки
            BUILD=$(git tag | grep "^v$VERSION-$BRANCH_NAME\." | wc -l)
            BUILD=$((BUILD + 1))
          fi

          FULL_VERSION="$VERSION-$BRANCH_NAME.$BUILD"

          # Обновляем package.json.version
          node -e "let p=require('./package.json'); p.version='$FULL_VERSION'; require('fs').writeFileSync('./package.json', JSON.stringify(p, null, 2));"

          # Обновляем .env
          touch .env
          if grep -q "^VITE_APP_VERSION=" .env; then
            sed -i "s/^VITE_APP_VERSION=.*/VITE_APP_VERSION=$FULL_VERSION/" .env
          else
            echo "VITE_APP_VERSION=$FULL_VERSION" >> .env
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD=$BUILD" >> $GITHUB_ENV
          echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT


  dependencies:
    needs: [git, version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            ~/.bun/install/cache
          key: |
            r1/${{ runner.os }}/${{ inputs.package_manager }}/deps/${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/bun.lockb') }}
          restore-keys: |
            r1/${{ runner.os }}/${{ inputs.package_manager }}/deps/

      - name: Install dependencies
        env:
          BUN_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}
          NPM_CONFIG_USERCONFIG: ~/.npmrc
        run: |
          case "${{ inputs.package_manager }}" in
            npm)
              npm ci
              ;;
            yarn)
              corepack enable
              yarn install --frozen-lockfile
              ;;
            bun)
              bun install --no-save
              ;;
            *)
              echo "Unknown package manager: ${{ inputs.package_manager }}"
              exit 1
              ;;
          esac

  build:
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build project
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Building for branch: $BRANCH_NAME"

          case "${{ inputs.package_manager }}" in
            npm)
              npm run build:$BRANCH_NAME
              ;;
            yarn)
              yarn build:$BRANCH_NAME
              ;;
            bun)
              bun run build:$BRANCH_NAME
              ;;
          esac

  publish:
    needs: [build, version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Push version and tag
        run: |
          git add -u
          if ! git diff --cached --quiet; then
            git commit -m "version: ${{ needs.version.outputs.full_version }}"
          fi
          git tag -a "v${{ needs.version.outputs.full_version }}" -m "version: ${{ needs.version.outputs.full_version }}"
          git push origin HEAD:${{ github.ref_name }}
          git push origin "v${{ needs.version.outputs.full_version }}"

  deploy:
    needs: [build, publish, version]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Write build info
        run: |
          COMMIT="$(git rev-parse --short HEAD)"
          DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          echo "version: ${{ needs.version.outputs.full_version }}" > build/build-info.txt
          echo "commit: $COMMIT" >> build/build-info.txt
          echo "date: $DATE" >> build/build-info.txt

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.ACCESS_GITHUB_TOKEN }}
          publish_branch: "build_${{ github.ref_name }}"
          publish_dir: build
          force_orphan: true
