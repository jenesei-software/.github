name: Library Publish

on:
  workflow_call:
    inputs:
      registry_type:
        description: "npm | github | all"
        required: true
        default: "github"
        type: string
      version_type:
        description: "major | minor | patch"
        required: true
        type: string
      package_manager:
        description: "npm | yarn | bun"
        required: false
        default: "npm"
        type: string
    secrets:
      NPM_TOKEN:
        required: false
      ACCESS_GITHUB_TOKEN:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Setup Bun
        if: inputs.package_manager == 'bun'
        run: |
          curl -fsSL https://bun.sh/install | bash
          echo "${HOME}/.bun/bin" >> $GITHUB_PATH

      - name: Clean Git
        run: |
          git reset --hard || echo "No changes to reset"
          git clean -fd || echo "No files to clean"

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Define version type
        id: version_type
        run: |
          echo "Version type input: ${{ inputs.version_type }}"

          if [[ -n "${{ inputs.version_type }}" ]]; then
            VERSION_TYPE="${{ inputs.version_type }}"
            echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          else
            echo "No version bump requested. Skipping versioning."
            echo "VERSION_TYPE=none" >> $GITHUB_ENV
          fi

      - name: Bump version
        if: env.VERSION_TYPE != 'none'
        run: |
          if [[ "$VERSION_TYPE" == "major" ]]; then
            npx standard-version --release-as major --skip.commit --skip.tag
          elif [[ "$VERSION_TYPE" == "minor" ]]; then
            npx standard-version --release-as minor --skip.commit --skip.tag
          else
            npx standard-version --release-as patch --skip.commit --skip.tag
          fi


          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          if grep -q "VITE_APP_VERSION=" .env; then
            sed -i "s/^VITE_APP_VERSION=.*/VITE_APP_VERSION=$VERSION/" .env
          else
            echo "" >> .env
            echo "VITE_APP_VERSION=$VERSION" >> .env
          fi

          git add -u

          if ! git diff --cached --quiet; then
            git commit -m "version: $VERSION"
            git tag -a "v$VERSION" -m "version: $VERSION"
          else
            echo "Nothing to commit"
          fi

          git push origin HEAD:${{ github.ref_name }}
          git push origin "v$VERSION"

      - name: Configure npm for GitHub Packages
        if: github.event.inputs.registry_type == 'github' || github.event.inputs.registry_type == 'all'
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.ACCESS_GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Check version in GitHub Packages
        if: github.event.inputs.registry_type == 'github' || github.event.inputs.registry_type == 'all'
        id: check_version_github
        run: |
          EXISTING_VERSION=$(npm view @jenesei-software/jenesei-ui-react versions --registry https://npm.pkg.github.com --json | grep ${VERSION} || true)
          if [ -n "$EXISTING_VERSION" ]; then
            echo "Version ${VERSION} already exists. Skipping publish."
            echo "publishGH=false" >> $GITHUB_ENV
          else
            echo "publishGH=true" >> $GITHUB_ENV
          fi

      - name: Configure npm for NPM Registry
        if: inputs.registry_type == 'npm' || inputs.registry_type == 'all'
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          else
            echo "NPM_TOKEN is not set, skipping npm registry configuration."
          fi

      - name: Check version exists NPM
        if: github.event.inputs.registry_type == 'npm' || github.event.inputs.registry_type == 'all'
        id: check_version_npm
        run: |
          EXISTING_VERSION=$(npm view @jenesei-software/jenesei-plugin-vite versions --json | grep ${VERSION} || true)
          if [ -n "$EXISTING_VERSION" ]; then
            echo "Version ${VERSION} already exists. Skipping publish."
            echo "publishNPM=false" >> $GITHUB_ENV
          else
            echo "publishNPM=true" >> $GITHUB_ENV
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.cache/yarn
            ~/.bun/install/cache
          key: |
            r1/${{ runner.os }}/${{ inputs.package_manager }}/deps/${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/bun.lockb') }}
          restore-keys: |
            r1/${{ runner.os }}/${{ inputs.package_manager }}/deps/

      - name: Install dependencies
        if: env.publishGH == 'true' || env.publishNPM == 'true'
        run: |
          case "${{ inputs.package_manager }}" in
            npm)
              npm ci
              ;;
            yarn)
              corepack enable
              yarn install --frozen-lockfile
              ;;
            bun)
              bun install --no-save
              ;;
            *)
              echo "Unknown package manager: ${{ inputs.package_manager }}"
              exit 1
              ;;
          esac

      - name: Build
        if: env.publishGH == 'true' || env.publishNPM == 'true'
        run: |
          case "${{ inputs.package_manager }}" in
            npm)
              npm run build
              ;;
            yarn)
              yarn build
              ;;
            bun)
              bun run build
              ;;
          esac

      - name: Publish to GitHub Packages
        if: env.publishGH == 'true'
        run: |
          npm publish --registry=https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

      - name: Publish to NPM
        if: env.publishNPM == 'true'
        run: |
          npm publish --registry=https://registry.npmjs.org/
           if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            npm publish --registry=https://registry.npmjs.org/
          else
            echo "NPM_TOKEN is not set, skipping npm registry configuration."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
