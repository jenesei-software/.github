name: Library Publish

on:
  workflow_call:
    inputs:
      registry_type:
        description: 'npm | github | all'
        required: true
        default: 'github'
        type: string
      version_type:
        description: 'major | minor | patch'
        required: true
        type: string
    secrets:
      NPM_CYRILSTRONE_TOKEN:
        required: true
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Clean git working directory
        run: |
          git reset --hard || echo "No changes to reset"
          git clean -fd || echo "No files to clean"

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Configure npm for GitHub Packages
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          echo "@jenesei-software:registry=https://npm.pkg.github.com/" >> ~/.npmrc

      - name: Determine version bump type
        id: version_type
        run: |
          echo "Version type input: ${{ inputs.version_type }}"

          if [[ -n "${{ inputs.version_type }}" ]]; then
            VERSION_TYPE="${{ inputs.version_type }}"
            echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          else
            echo "No version bump requested. Skipping versioning."
            echo "VERSION_TYPE=none" >> $GITHUB_ENV
          fi

      - name: Bump version
        if: env.VERSION_TYPE != 'none'
        run: |
          if [[ "$VERSION_TYPE" == "major" ]]; then
            npx standard-version --release-as major --skip.commit --skip.tag
          elif [[ "$VERSION_TYPE" == "minor" ]]; then
            npx standard-version --release-as minor --skip.commit --skip.tag
          else
            npx standard-version --release-as patch --skip.commit --skip.tag
          fi


          VERSION=$(node -p "require('./package.json').version")

          if grep -q "VITE_APP_VERSION=" .env; then
            sed -i "s/^VITE_APP_VERSION=.*/VITE_APP_VERSION=$VERSION/" .env
          else
            echo "" >> .env
            echo "VITE_APP_VERSION=$VERSION" >> .env
          fi

          if [ -f "README.md" ]; then
            git add README.md
          fi

          if [ -f "package.json" ]; then
            git add package.json
          fi

          if [ -f "CHANGELOG.md" ]; then
            git add CHANGELOG.md
          fi

          if [ -f "package-lock.json" ]; then
            git add package-lock.json
          fi

          if [ -f "bun.lockb" ]; then
            git add bun.lockb
          fi

          if [ -f ".env" ]; then
            git add .env
          fi

          git commit -m "version: $VERSION"
          git tag -a "v$VERSION" -m "version: $VERSION"

      - name: Configure npm for GitHub Packages
        if: github.event.inputs.registry_type == 'github' || github.event.inputs.registry_type == 'all'
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Check if version exists in GitHub Packages
        if: github.event.inputs.registry_type == 'github' || github.event.inputs.registry_type == 'all'
        id: check_version_github
        run: |
          EXISTING_VERSION=$(npm view @jenesei-software/jenesei-ui-react versions --registry https://npm.pkg.github.com --json | grep ${VERSION} || true)
          if [ -n "$EXISTING_VERSION" ]; then
            echo "Version ${VERSION} already exists. Skipping publish."
            echo "publishGH=false" >> $GITHUB_ENV
          else
            echo "publishGH=true" >> $GITHUB_ENV
          fi

      - name: Configure npm for NPM Registry
        if: github.event.inputs.registry_type == 'npm' || github.event.inputs.registry_type == 'all'
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_CYRILSTRONE_TOKEN }}" >> ~/.npmrc

      - name: Check if version exists in NPM
        if: github.event.inputs.registry_type == 'npm' || github.event.inputs.registry_type == 'all'
        id: check_version_npm
        run: |
          EXISTING_VERSION=$(npm view @jenesei-software/jenesei-plugin-vite versions --json | grep ${VERSION} || true)
          if [ -n "$EXISTING_VERSION" ]; then
            echo "Version ${VERSION} already exists. Skipping publish."
            echo "publishNPM=false" >> $GITHUB_ENV
          else
            echo "publishNPM=true" >> $GITHUB_ENV
          fi

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: |
            r1/${{ runner.os }}/npm/${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            r1/${{ runner.os }}/npm/

      - name: Install dependencies
        if: env.publishGH == 'true' || env.publishNPM == 'true'
        run: |
          npm ci

      - name: Build
        if: env.publishGH == 'true' || env.publishNPM == 'true'
        run: |
          npm run build

      - name: Publish to GitHub Packages
        if: env.publishGH == 'true'
        run: |
          npm publish --registry=https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        if: env.publishNPM == 'true'
        run: |
          npm publish --registry=https://registry.npmjs.org/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_CYRILSTRONE_TOKEN }}

      - name: Push
        run: |
          git push origin HEAD:${{ github.ref_name }}
          git push origin "v$VERSION"