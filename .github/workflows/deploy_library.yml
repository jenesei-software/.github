name: Library Publish

on:
  workflow_call:
    inputs:
      registry_type:
        description: "npm | github | all"
        required: true
        default: "github"
        type: string
      version_type:
        description: "major | minor | patch | none"
        required: true
        type: string
      package_manager:
        description: "npm | yarn | bun | pnpm"
        required: false
        default: "npm"
        type: string
    secrets:
      NPM_TOKEN:
        required: false
      ACCESS_GITHUB_TOKEN:
        required: true

jobs:
  setup-branch:
    uses: jenesei-software/.github/.github/workflows/setup-branch.yml@main
    secrets:
      ACCESS_GITHUB_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

  setup-package-name:
    uses: jenesei-software/.github/.github/workflows/setup-package-name.yml@main
    secrets:
      ACCESS_GITHUB_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

  setup-version:
    needs: setup-branch
    uses: jenesei-software/.github/.github/workflows/setup-version.yml@main
    with:
      version_type: ${{ inputs.version_type }}
      branch_name: ${{ needs.setup-branch.outputs.branch_name }}
    secrets:
      ACCESS_GITHUB_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

  setup-build:
    needs: [setup-branch, setup-version]
    uses: jenesei-software/.github/.github/workflows/setup-build.yml@main
    with:
      full_version: ${{ needs.setup-version.outputs.full_version }}
      package_manager: ${{ inputs.package_manager }}
    secrets:
      ACCESS_GITHUB_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

  publish:
    needs: [setup-build, setup-version, setup-branch, setup-package-name]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.setup-version.outputs.full_version }}
      REGISTRY_TYPE: ${{ inputs.registry_type }}
      PACKAGE_NAME: ${{ needs.setup-package-name.outputs.package_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure npm for GitHub Packages
        if: env.REGISTRY_TYPE == 'github' || env.REGISTRY_TYPE == 'all'
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.ACCESS_GITHUB_TOKEN }}" >> ~/.npmrc

      - name: Configure npm for NPM Registry
        if: env.REGISTRY_TYPE == 'npm' || env.REGISTRY_TYPE == 'all'
        run: |
          if [ -n "${{ secrets.NPM_TOKEN }}" ]; then
            echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc
          fi

      - name: Check GitHub version
        id: check_github
        if: env.REGISTRY_TYPE == 'github' || env.REGISTRY_TYPE == 'all'
        run: |
          EXISTS=$(npm view $PACKAGE_NAME versions --registry https://npm.pkg.github.com --json | grep $VERSION || true)
          if [ -z "$EXISTS" ]; then
            echo "PUBLISH_GH=true" >> $GITHUB_OUTPUT
          else
            echo "PUBLISH_GH=false" >> $GITHUB_OUTPUT
          fi

      - name: Check NPM version
        id: check_npm
        if: env.REGISTRY_TYPE == 'npm' || env.REGISTRY_TYPE == 'all'
        run: |
          EXISTS=$(npm view $PACKAGE_NAME versions --json | grep $VERSION || true)
          if [ -z "$EXISTS" ]; then
            echo "PUBLISH_NPM=true" >> $GITHUB_OUTPUT
          else
            echo "PUBLISH_NPM=false" >> $GITHUB_OUTPUT
          fi

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: artifact-build
          path: build

      - name: Write version to package.json and .env
        run: |
          node -e "let p=require('./package.json'); p.version='$VERSION'; require('fs').writeFileSync('./package.json', JSON.stringify(p, null, 2));"

          touch .env
          if grep -q '^VITE_APP_VERSION=' .env; then
            sed -i "s/^VITE_APP_VERSION=.*/VITE_APP_VERSION=$VERSION/" .env
          else
            echo "VITE_APP_VERSION=$VERSION}" >> .env
          fi

      - name: Publish to GitHub Packages
        if: steps.check_github.outputs.PUBLISH_GH == 'true'
        run: npm publish --registry=https://npm.pkg.github.com/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.ACCESS_GITHUB_TOKEN }}

      - name: Publish to NPM Registry
        if: steps.check_npm.outputs.PUBLISH_NPM == 'true'
        run: |
          npm publish --registry=https://registry.npmjs.org/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Git Commit & Push Tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add -u
          if ! git diff --cached --quiet; then
            git commit -m "version: $VERSION"
          fi

          git tag -a "v$VERSION" -m "version: $VERSION"
          git push origin HEAD:${{ needs.setup-branch.outputs.branch_name }}
          git push origin "v$VERSION"
